@startuml
' Raggruppamento delle classi del package server
package server {
    class Server <<Singleton>> {
      - instance: Server
      - serverSocket: ServerSocket
      - port: int
      - observers: List<FileDownloadObserver>
      - credentialsFile: File
      + getInstance(): Server
      + getCredentialsFile(): File
      + addObserver(o: FileDownloadObserver): void
      + removeObserver(o: FileDownloadObserver): void
      + notifyDownload(username: String, fileName: String): void
      + start(): void
      + main(args: String[]): void
    }

    class ClientHandler {
      - clientSocket: Socket
      - server: Server
      - in: BufferedReader
      - out: PrintWriter
      - username: String
      - currentDir: File
      + sendMessage(message: String): void
      + getCurrentDir(): File
      + setCurrentDir(dir: File): void
      + getUsername(): String
      + getServer(): Server
      + run(): void
    }

    class AuthenticationManager {
      + login(username: String, password: String, credentialsFile: File): boolean
      + register(username: String, password: String, credentialsFile: File): boolean
    }

    ' Raggruppamento del package commands
    package commands {
        interface Command {
          + execute(handler: ClientHandler, args: String[]): void
        }

        class ListCommand {
          + execute(handler: ClientHandler, args: String[]): void
        }

        class CdCommand {
          + execute(handler: ClientHandler, args: String[]): void
        }

        class DownloadCommand {
          + execute(handler: ClientHandler, args: String[]): void
        }

        class CommandFactory {
          + getCommand(commandName: String): Command
        }
    }

    ' Raggruppamento del package observers
    package observers {
        interface FileDownloadObserver {
          + onFileDownloaded(username: String, fileName: String): void
        }

        class LoggerObserver {
          + onFileDownloaded(username: String, fileName: String): void
        }
    }
}

package client {
    class Client {
      + main(args: String[]): void
    }
}

' Relazioni tra le classi e le interfacce
Server "1" --> "*" ClientHandler : gestisce
ClientHandler --> Server : usa
Server "1" --> "*" observers.FileDownloadObserver : notifica
commands.CommandFactory ..> commands.Command : crea
ClientHandler --> commands.Command : esegue
client.Client --> Server : connessione
AuthenticationManager ..> File : legge/scrive
observers.LoggerObserver ..|> observers.FileDownloadObserver : implementa

@enduml